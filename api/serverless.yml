# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: api
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: go1.x
  region: eu-west-2

useDotenv: true

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:db:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:db:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
  patterns:
    - "!./**"
    - ./bin/**

plugins:
  - serverless-localstack

custom:
  localstack:
    stages:
      - local
    host: http://localhost
    edgePort: 4566

functions:
  entrypoint:
    handler: bin/entrypoint/bootstrap
    environment:
      JWT_SECRET: ${env:JWT_SECRET}
      JWT_EXPIRE_MINS: ${env:JWT_EXPIRE_MINS}
      REGISTRY_DATA: ${env:REGISTRY_DATA}
      GUEST_PASSWORD: ${env:GUEST_PASSWORD}
      STRIPE_KEY: ${env:STRIPE_KEY}
      SUCCESS_URL: ${env:SUCCESS_URL}
      CANCEL_URL: ${env:CANCEL_URL}
      COOKIE_DOMAIN: ${env:COOKIE_DOMAIN}
      COOKIE_SECURE: ${env:COOKIE_SECURE}
      CORS_ALLOWED_ORIGIN: ${env:CORS_ALLOWED_ORIGIN}
    events:
      - http:
          path: login
          method: post
          cors:
            origins: ${env:CORS_ALLOWED_ORIGIN}
            headers:
              - Cookie
              - Content-Type
            allowCredentials: true
      - http:
          path: checkout
          method: post
          cors:
            origin: ${env:CORS_ALLOWED_ORIGIN}
            headers:
              - Content-Type
              - Cookie
            allowCredentials: true
      - http:
          path: verify
          method: post
          cors:
            origin: ${env:CORS_ALLOWED_ORIGIN}
            headers:
              - Content-Type
              - Cookie
            allowCredentials: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:db:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "db.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/db/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:db:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

